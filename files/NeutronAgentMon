#!/bin/sh
#
#
#	NeutronAgentMon OCF RA.
#	Starts crm_mon in background which logs cluster status as
#	html to the specified file.
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Brée
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
# OCF instance parameters:
#	OCF_RESKEY_user

#######################################################################
# Initialization:
: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="NeutronAgentMon">
<version>1.0</version>

<longdesc lang="en">
This is a NeutronAgentMon Resource Agent.
It outputs current cluster status to the html.
</longdesc>
<shortdesc lang="en">Runs crm_mon in the background, recording the cluster status to an HTML file</shortdesc>

<parameters>

<parameter name="user" unique="0">
<longdesc lang="en">
The user we want to run crm_mon as
</longdesc>
<shortdesc lang="en">The user we want to run crm_mon as</shortdesc>
<content type="string" default="root" />
</parameter>

</parameters>

<actions>
<action name="start"   timeout="20" />
<action name="stop"    timeout="20" />
<action name="monitor" depth="0"  timeout="20" interval="60" />
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="30" />
</actions>
</resource-agent>
END
}

#######################################################################

NeutronAgentMon_usage() {
	cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

NeutronAgentMon_exit() {
    if [ $1 != 0 ]; then
        exit $OCF_ERR_GENERIC
    else
        exit $OCF_SUCCESS
    fi
}

NeutronAgentMon_start() {
    pid=`sudo ps -aux | grep m\[o\]nitor.py | awk -F' ' '{print $2}'`
    if [ -z $pid ]; then
        ocf_log info "[NeutronAgentMon_start] Start Monitor daemon."
        sudo python /usr/local/bin/monitor.py --config-file /tmp/monitor.conf --log-file /tmp/monitor.log >> /dev/null 2>&1 & echo $!
        sleep 5
    else
        ocf_log warn "[NeutronAgentMon_start] Monitor daemon already running."
    fi
    NeutronAgentMon_exit $?
}

NeutronAgentMon_stop() {
    pid=`sudo ps -aux | grep m\[o\]nitor.py | awk -F' ' '{print $2}'`
    if [ ! -z $pid ]; then
        sudo kill -s 9 $pid
        ocf_log info "[NeutronAgentMon_stop] Pid $pid is killed."
    else
        ocf_log warn "[NeutronAgentMon_stop] Monitor daemon already stopped."
    fi
    NeutronAgentMon_exit 0
}

NeutronAgentMon_monitor() {
    pid=`sudo ps -aux | grep m\[o\]nitor.py | awk -F' ' '{print $2}'`
    if [ ! -z $pid ]; then
        ocf_log info "[NeutronAgentMon_monitor] success."
        exit $OCF_SUCCESS
    fi
    exit $OCF_NOT_RUNNING
}

NeutronAgentMon_validate() {
# Existence of the user
    if [ ! -z $OCF_RESKEY_user ]; then
	getent passwd "$OCF_RESKEY_user" >/dev/null
	if [ $? -eq 0 ]; then
	    : Yes, user exists. We can further check his permission on crm_mon if necessary
	else
	    ocf_log err "The user $OCF_RESKEY_user does not exist!"
	    exit $OCF_ERR_ARGS
	fi
    fi

    echo "Validate OK"
    return $OCF_SUCCESS
}

if [ $# -ne 1 ]; then
    NeutronAgentMon_usage
    exit $OCF_ERR_ARGS
fi

: ${OCF_RESKEY_update:="15000"}
: ${OCF_RESKEY_pidfile:="/tmp/NeutronAgentMon_${OCF_RESOURCE_INSTANCE}.pid"}
: ${OCF_RESKEY_htmlfile:="/tmp/NeutronAgentMon_${OCF_RESOURCE_INSTANCE}.html"}

OCF_RESKEY_update=`expr $OCF_RESKEY_update / 1000`

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		NeutronAgentMon_start
		;;
stop)		NeutronAgentMon_stop
		;;
monitor)	NeutronAgentMon_monitor
		;;
validate-all)	NeutronAgentMon_validate
		;;
usage|help)	NeutronAgentMon_usage
		exit $OCF_SUCCESS
		;;
*)		NeutronAgentMon_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

exit $?
